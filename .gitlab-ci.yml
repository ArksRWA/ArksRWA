stages:
  - dev-pre-merge
  - dev-build
  - dev-deploy

variables:
  DEV_TAG: "$GIT_COMMIT_TAG"

dev-pre-merge:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev" && $CI_PIPELINE_SOURCE == "merge_request_event"'
  image: docker:20.10.16
  stage: dev-pre-merge
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - rm -rf .env.local
    - cp $DEV_ENV .env.local
    - cat .env.local
    - source .env.local
    - export TAG="${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}-dev"
  script:
    - docker build -t $CI_REGISTRY/odikk60/arks-rwa:$TAG .

dev-build:
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  image: docker:20.10.16
  stage: dev-build
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add git
    - rm -rf .env
    - cp $DEV_ENV .env
    - source .env
    - export TAG="${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}-dev"
    - git remote set-url origin ${CI_PROJECT_URL/gitlab.com/oauth2:${PERSONAL_ACCESS_TOKEN}@gitlab.com}.git
    - git remote -v
  script:
    - git tag $TAG
    - git push origin $TAG
    - echo "Pushed new tag $TAG"
    - docker build -t $CI_REGISTRY/odikk60/arks-rwa:$TAG .
    - docker push $CI_REGISTRY/odikk60/arks-rwa:$TAG

dev-deploy:
  rules:
    - if: '$CI_COMMIT_BRANCH == "feat/infra-enhancement"'
  image: docker:20.10.16
  environment:
    name: Development
    url: https://api.dev.cosrent.id
  services:
    - docker:20.10.16-dind
  stage: dev-deploy
  before_script:
    - apk add openssh-client git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - export TAG="$(git describe --tags --abbrev=0)"
    - echo "Last tag $TAG"
    - rm -rf .env
    - cp $DEV_ENV .env
    - echo "CI_REGISTRY=$CI_REGISTRY" >> .env
    - echo "TAG=$TAG" >> .env
    - source .env
  script:
    # Upload files to server
    - scp -i $ID_RSA -o StrictHostKeyChecking=no docker-compose.yml root@$SERVER_HOST:/home/arks/domains/dev.arks.web.id/public_html/
    - scp -i $ID_RSA -o StrictHostKeyChecking=no infra/nginx-template.conf root@$SERVER_HOST:/home/arks/domains/dev.arks.web.id/public_html/
    - scp -i $ID_RSA -o StrictHostKeyChecking=no .env root@$SERVER_HOST:/home/arks/domains/dev.arks.web.id/public_html/

    # SSH into server to deploy and update nginx
    - |
      ssh -i $ID_RSA -o StrictHostKeyChecking=no root@$SERVER_HOST <<'EOF'
        set -euo pipefail

        cd /home/arks/domains/dev.arks.web.id/public_html

        echo '[1/5] Docker Compose pull + up...'
        docker compose -f docker-compose.yml pull dfx
        docker compose -f docker-compose.yml up -d --force-recreate --remove-orphans

        echo '[2/5] Waiting for .env from dfx container...'
        MAX_WAIT=300
        ELAPSED=0
        until docker exec dfx test -f /app/.env; do
          if [ $ELAPSED -ge $MAX_WAIT ]; then
            echo 'ERROR: .env not found after 60s.' >&2
            exit 1
          fi
          echo 'Still waiting for .env...'
          sleep 2
          ELAPSED=$((ELAPSED + 2))
        done

        echo '[3/5] Extracting .env from container...'
        docker cp dfx:/app/.env ./shared_output.env

        echo '[4/5] Parsing frontend canister ID...'
        FRONTEND_ID=$(grep CANISTER_ID_frontend shared_output.env | cut -d '=' -f2)
        echo "Found frontend ID: $FRONTEND_ID"

        echo '[5/5] Generating and activating NGINX config...'
        sed "s|__CANISTER_ID__|$FRONTEND_ID|g" nginx-template.conf > /etc/nginx/sites-available/dev.arks.web.id.conf

        ln -sf /etc/nginx/sites-available/dev.arks.web.id.conf /etc/nginx/sites-enabled/
        nginx -t && systemctl reload nginx
      EOF
